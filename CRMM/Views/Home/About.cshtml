@using Data.Mapping
@using Database
@using Microsoft.AspNetCore.Razor.Language.Intermediate
@using Microsoft.EntityFrameworkCore.Internal
@{
    ViewData["Title"] = "About";
}
@*<h2>@ViewData["Title"]</h2>
    <h3>@ViewData["Message"]</h3>*@

<p>Model binder test.</p>


@{
    var values = new Dictionary<string, object>
    {
        {"a", "1" },
        {"b", 2 }
    };

    var obj = new TestModel();
    var obj2 = new TestModel("2", 4);
}

<h3>New</h3>
@foreach (var property in obj.GetType().GetProperties())
{
    <text>
        <b>@property.Name</b> = @property.GetValue(obj) <br />
    </text>
}

@{
    obj.HistoryList.Add("Dictionary");
    ModelMapper.Map(values, obj);
}

<h3>Dictionary bind</h3>
@foreach (var property in obj.GetType().GetProperties())
{
    <text>
        <b>@property.Name</b> = @property.GetValue(obj) <br />
    </text>
}

@{
    obj.HistoryList.Add("Public");
    ModelMapper.Map(obj2, obj, AccessProtection.Widows);
}

<h3>Object bind public</h3>
@foreach (var property in obj.GetType().GetProperties())
{
    <text>
        <b>@property.Name</b> = @property.GetValue(obj) <br />
    </text>
}

@{
    obj.HistoryList.Add("Private");
    ModelMapper.Map(obj2, obj, AccessProtection.Sasuke);
}

<h3>Object bind private</h3>
@foreach (var property in obj.GetType().GetProperties())
{
    <text>
        <b>@property.Name</b> = @property.GetValue(obj) <br />
    </text>
}

<h3>DB Select</h3>
@{
    var context = new DBContext("35.196.199.23", "crmm", "crmm*", "crmm");
    var connector = new MySqlConnector(context);
    var results = connector.Execute("SELECT * FROM Test").MapAll<TestModel>().ToList();
}

@foreach (var result in results)
{
    <b>@results.IndexOf(result)</b><br />
    foreach (var property in result.GetType().GetProperties())
    {
        <text>
            <b>@property.Name</b> = @property.GetValue(result) <br />
        </text>
    }
}

<h3>DB Select Update</h3>
@{
    obj.HistoryList.Add("Dictionary");
    ModelMapper.Map(values, obj, AccessProtection.Sasuke);
    obj.HistoryList.Add("DB");
    obj2.HistoryList.Add("DB");
    results = connector.Execute("SELECT * FROM Test").MapAll(new[] { obj, obj2 }).ToList();
}

@foreach (var result in results)
{
    <b>@results.IndexOf(result)</b><br />
    foreach (var property in result.GetType().GetProperties())
    {
        <text>
            <b>@property.Name</b> = @property.GetValue(result) <br />
        </text>
    }
}